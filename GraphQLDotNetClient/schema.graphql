schema {
  query: EShopQueries
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type EShopQueries {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  alphaBroderProducts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [AlphaBroderProductSortInput!] where: AlphaBroderProductFilterInput): AlphaBroderProductsConnection
  alphaBroderProductById(id: String!): AlphaBroderProduct
  sanMarProducts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [SanMarProductSortInput!] where: SanMarProductFilterInput): SanMarProductsConnection
  sanMarProductById(id: String!): SanMarProduct
  me: User!
}

"The product entity of AlphaBroder."
input AlphaBroderProductSortInput {
  id: SortEnumType
  "The name of the product."
  name: SortEnumType
  description: SortEnumType
  price: SortEnumType
  alphaBroderCategory: AlphaBroderCategorySortInput
  lastModifiedAt: SortEnumType
}

"The product entity of AlphaBroder."
input AlphaBroderProductFilterInput {
  and: [AlphaBroderProductFilterInput!]
  or: [AlphaBroderProductFilterInput!]
  id: StringOperationFilterInput
  "The name of the product."
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  price: DecimalOperationFilterInput
  alphaBroderCategory: AlphaBroderCategoryFilterInput
  lastModifiedAt: DateTimeOperationFilterInput
}

input SanMarProductSortInput {
  id: SortEnumType
  productName: SortEnumType
  productDetails: SortEnumType
  cost: SortEnumType
  productCategory: SanMarCategorySortInput
  modifiedAt: SortEnumType
  stockQuantity: SortEnumType
  isAvailable: SortEnumType
}

input SanMarProductFilterInput {
  and: [SanMarProductFilterInput!]
  or: [SanMarProductFilterInput!]
  id: StringOperationFilterInput
  productName: StringOperationFilterInput
  productDetails: StringOperationFilterInput
  cost: DecimalOperationFilterInput
  productCategory: SanMarCategoryFilterInput
  modifiedAt: DateTimeOperationFilterInput
  stockQuantity: IntOperationFilterInput
  isAvailable: BooleanOperationFilterInput
}

"A connection to a list of items."
type AlphaBroderProductsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AlphaBroderProductsEdge!]
  "A flattened list of the nodes."
  nodes: [AlphaBroderProduct!]
}

"A connection to a list of items."
type SanMarProductsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SanMarProductsEdge!]
  "A flattened list of the nodes."
  nodes: [SanMarProduct!]
}

enum SortEnumType {
  ASC
  DESC
}

input AlphaBroderCategorySortInput {
  id: SortEnumType
  "The name of the category."
  name: SortEnumType
  description: SortEnumType
  lastModifiedAt: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input AlphaBroderCategoryFilterInput {
  and: [AlphaBroderCategoryFilterInput!]
  or: [AlphaBroderCategoryFilterInput!]
  id: StringOperationFilterInput
  "The name of the category."
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  lastModifiedAt: DateTimeOperationFilterInput
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input SanMarCategorySortInput {
  id: SortEnumType
  categoryName: SortEnumType
  categoryDescription: SortEnumType
  updatedAt: SortEnumType
  isActive: SortEnumType
}

input SanMarCategoryFilterInput {
  and: [SanMarCategoryFilterInput!]
  or: [SanMarCategoryFilterInput!]
  id: StringOperationFilterInput
  categoryName: StringOperationFilterInput
  categoryDescription: StringOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  isActive: BooleanOperationFilterInput
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"The product entity of AlphaBroder."
type AlphaBroderProduct implements Node {
  id: ID!
  "The name of the product."
  name: String!
  description: String!
  price: Decimal!
  alphaBroderCategory: AlphaBroderCategory!
  lastModifiedAt: DateTime!
}

"An edge in a connection."
type AlphaBroderProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AlphaBroderProduct!
}

type SanMarProduct implements Node {
  id: ID!
  productName: String!
  productDetails: String!
  cost: Decimal!
  productCategory: SanMarCategory!
  modifiedAt: DateTime!
  stockQuantity: Int!
  isAvailable: Boolean!
}

"An edge in a connection."
type SanMarProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SanMarProduct!
}

"The built-in `Decimal` scalar type."
scalar Decimal

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type AlphaBroderCategory {
  id: String!
  "The name of the category."
  name: String!
  description: String!
  lastModifiedAt: DateTime!
}

type User {
  username: String
  claims: [String!]!
}

type SanMarCategory {
  id: String!
  categoryName: String!
  categoryDescription: String!
  updatedAt: DateTime!
  isActive: Boolean!
}